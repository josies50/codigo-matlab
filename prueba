clear all      % Limpia todas las variables del workspace
close all      % Cierra todas las figuras abiertas
clc            % Borra la ventana de comandos

%-----------------LABORATORIO 1: TRANSFORMACION DE SEÑALES-----------------
t = -10:0.01:10;       %Plazo de la señal en continuo
n = -10:1:10;         %Plazo de la señal en discreto

nmin = min(n);      %Limite inferior de la señal discreta
nmax = max(n);      %Limite superior de la señal disreta


%-----------------FUNCIONES A TRANSFORMAR----------------------------------

% x1 =  tri ( (t-1)/4) (abs(t)<1).*1-abs(t) +(abs(t)>=1).*0');
% x2 = e^(-2(abs(t-1))) (-9 <= t <=10)');
% x3 = [0, 2,2,1, 1,0]');
% x3 = [0,0,0,0.5,-0.5,1,0.5,1,0.5,1,-0.5,-0.5,0,0,0]');
% x4 = [                     -1,-0.5,0.5,1,1,1,1,0.5])');
% x6 = ?(-1^k) ?(t-2k) desde k=1 hasta k=5 ');
% x7 =  (-7>=n & n<3).*(2) + (-2>=n&n<2).*(2n+1)+ (3>=n & n<7).*(7/n)');
% x8 =  (-5>=n & n<0).*2.^n + (n>=1 & n<=7).*(5/6).^n');


%-----------------MENU  Y CONDICIONES---------------------------------------
disp('Bienvenido al Laboratorio 1: Transformación de señales');
disp('                                                                  ');
disp('En el siguiente laboratorio tendra la opción de elegir entre una');
disp('de las señales continuas o discretas');
disp('                                                                  ');

disp('------------------------------------------------------------------');
disp('Elección de la función continua a realizar');
disp('1) tri ( (t-1)/4) funcion compuesta');
disp('2)e^(-2(abs(t-1))) (-9 <= t <=10)');
disp('3) ?(-1^k) ?(t-2k) desde k=-10 hasta k=10 ');
disp('4) [-2,-1,0,0,1,2] ');
fc = input('Elija cuál función continua quiere utilizar: ');
disp('------------------------------------------------------------------');
disp('Elección de la función discreta a realizar');
disp('1) [0,0,0,0.5,-0.5,1,0.5,1,0.5,1,-0.5,-0.5,0,0,0]');
disp('2) [                     -1,-0.5,0.5,1,1,1,1,0.5])');
disp('3) (-7>=n & n<3).*(2) + (-2>=n&n<2).*(2n+1)+ (3>=n & n<7).*(7/n)');
disp('4) (-5>=n & n<0).*2.^n + (n>=1 & n<=7).*(5/6).^n');
fd = input('Elija cuál función discreta quiere utilizar: ');
disp('------------------------------------------------------------------');

disp('Desplazamiento de señales continuas');
d = input('Ingrese el valor del factor de desplazamiento: ');
disp('------------------------------------------------------------------');

disp('Transformación de señales continuas');
e = input('Ingrese el valor del factor de escalamiento: ');
disp('------------------------------------------------------------------');

disp('Desplazamiento de señales discretas');
dd = input('Ingrese el valor del factor de desplazamiento: ');
disp('------------------------------------------------------------------');

disp('Transformación de señales discretas');
ed = input('Ingrese el valor del factor de escalamiento: ');
disp('------------------------------------------------------------------');

%-----------------OPERACIÃÓN DE FUNCIÓN CONTINUA----------------------------
t = -9:0.01:10;       %Plazo de la señal en continuo
n = -10:1:10;         %Plazo de la señal en discreto

td = t-d;       %Desplazamiento de la señal
te = t/e;       %Escalamiento de la señal
ta = te-d;      %Operación final

nd = n-dd;       %Desplazamiento de la señal
ne = n/ed;       %Escalamiento de la señal
na = ne-dd;      %Operación final

disp('Elección del método en función continua');
disp('En el método 1 se DESPLAZA para luego escalar');
disp('En el método 2 se ESCALA y MUESTRA LA OPERACIÓN FINAL');
m = input('Elija cuál método usar: ');
disp('------------------------------------------------------------------');

%-----------------OPERACIÃ N DE FUNCIÃ N DISCRETA----------------------------

disp('Elección del método en función discreta');
disp('En el método 1 se DESPLAZA SIN INTERPOLAR');
disp('En el método 2 se ESCALA CON INTERPOLACION');
x= input('Elija cuál método usar: ');
disp('------------------------------------------------------------------');

figure(1)
switch fc
    case 1
        disp('1) tri ( (t-1)/4) (abs(t)<1).*1-abs(t) +(abs(t)>=1).*0');
        % Definir la función triangular simétrica centrada en 0
        tri = @(x) (1-abs(x)).*(abs(x)<1);

        % Definir la función f(t) en términos de la función tri
        x1 = @(t) (abs(t)<1).*tri((t-1)/4).*(1-abs(t));
        
        switch m
            case 1
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua ')
                subplot(3,1,2)
                plot(td,x1(t),'r')
                title('Función Desplazada td = t-d;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            case 2
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua')
                subplot(3,1,2)
                plot(te,x1(t),'r')
                title('Función Escalada te = t/e;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            otherwise
                disp('Número de método inválido');
        end
    case 2
        disp('2)e^(-2(abs(t-1))) donde -9 <= t <=10');
        % Definir la función triangular simétrica centrada en 0
        t = -9:0.01:10;
        td = t-d;       %Desplazamiento de la señal
        te = t/e;       %Escalamiento de la señal
        ta = te-d;      %Operación final
        % Definir la función f(t) en términos de la función tri
        x1 = @(t) exp(-2*abs(t-1));
        
        switch m
            case 1
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua ')
                subplot(3,1,2)
                plot(td,x1(t),'r')
                title('Función Desplazada td = t-d;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            case 2
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua')
                subplot(3,1,2)
                plot(te,x1(t),'r')
                title('Función Escalada te = t/e;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            otherwise
                disp('Función de mÃĐtodo invÃĄlido');
        end
    case 3
            disp('3) ?(-1^k) ?(t-2k) desde k=-10 hasta k=10');
        t= [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10];
        td = t-d;       %Desplazamiento de la señal
        te = t/e;       %Escalamiento de la señal
        ta = te-d;      %Operación final
        % Definir la función f(t) en términos de la función tri
        f = zeros(1,length(t)); % inicializar la función a cero
        for k = -10:10
        f = x + (-1)^k * (n == 2*k); % sumar el impulso unitario desplazado y alternado
        end
        x1 = @(t) (-1).^t.*(t-2.*f);
        switch m
            case 1
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua ')
                subplot(3,1,2)
                plot(td,x1(t),'r')
                title('Función Desplazada td = t-d;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            case 2
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua')
                subplot(3,1,2)
                plot(te,x1(t),'r')
                title('Función Escalada te = t/e;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            otherwise
                disp('Número de método inválido');
        end 
    case 4
        disp('4) [0, 2, 2, 1, 1, 0]');
        t= [-2,-1,0,0,1,2];
        td = t-d;       %Desplazamiento de la señal
        te = t/e;       %Escalamiento de la señal
        ta = te-d;      %Operación final
        x1 =  @(t)[0, 2, 2, 1, 1, 0];
        switch m
            case 1
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua')
                subplot(3,1,2)
                plot(td,x1(t),'r')
                title('Función Desplazada td = t-d;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            case 2
                subplot(3,1,1)
                plot(t,x1(t),'b')
                title('Función Original Continua')
                subplot(3,1,2)
                plot(te,x1(t),'r')
                title('Función Escalada  te = t/e;')
                subplot(3,1,3)
                plot(ta,x1(t),'g')
                title('Seņal original desplazada y escalada ta = te-d;')
            otherwise
                disp('Número de método inválido');
        end
end

%%%%%%%%%%%%%%FUNCIONES DISCRETAS$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%FUNCIONES DISCRETAS$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%FUNCIONES DISCRETAS$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%FUNCIONES DISCRETAS$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%7

%%%%%%%%%%%%%%FUNCIONES DISCRETAS$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%FUNCIONES DISCRETAS$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure(2)
switch fd
     case 1
        disp('1) [0,0,0,0.5,-0.5,1,0.5,1,0.5,1,-0.5,-0.5,0,0,0]');
       
        x8 = [0, 0, 0, 0.5,-0.5, 1,  0.5, 1,0.5,1, -0.5,-0.5,0,0,0];
        n =[-8, -7, -6,-5, -4,  -3, -2,  -1,0,  1,   2,   3, 4,5,6] ;
        
        nd = n-dd;       %Desplazamiento de la señal
        ne = n/ed;       %Escalamiento de la señal
        na = ne-dd;      %Operación final
        ndmin = n - min(n); %Desplazamiento de la señal
        namin = ne - min(ne); %Desplazamiento final
        bub= 1 / ed;
        
        % Operación final
         bub= abs(bub);
         nmin= min(n);
         nmax= max(n);
               ss=nmax-1;
        xi = nmin: bub :nmax; 
        
        % Crear la seņal diezmada x8d
            n88 = nmin:((nmax+1)/ed)-1;
            x8d = x8(1:ed:end);

        switch x
        case 1
                subplot(3,1,1)
                stem(n,x8,'b')
                title('Función Original Discreta')
                subplot(3,1,2)
                stem(n-dd,x8,'g')
                title('Función Desplazada')
                subplot(3,1,3)
                stem(na,x8,'g')
                title('Seņal original escalada y desplazada na = ne-dd')
             
            case 2
                
                           % Interpolación escalonada
                             % Conjunto de puntos para la interpolación
                            xe = zeros(size(xi));  % Valores de la interpolación escalonada
                            for i = 1:length(xi)
                                k2 = round(xi(i));  % Índice entero más cercano
                                k = abs(k2);
                                if k >= nmax  % Si el índice es mayor o igual a 7
                                    xe(i) = x8(end);  % Asignamos el último valor de la función
                                else
                                    xe(i) = x8(k+ss);  % Asignamos el valor correspondiente
                                end
                            end


                            
                        
                               % Interpolación por cero

                         %x8i = x8.* kron(1,[1 zeros(1,ed-1)]); % Se agrega un cero después de cada muestra
                         %x8i = [x8i, zeros(1, length(xi)-length(x8i))];
                            % Crear la secuencia de impulsos
                            impulse = kron([1 zeros(1, ed-1)], ones(1, ed));

                            % Aplicar la interpolación por cero
                            x_interp = kron(x8, [1 zeros(1, ed-1)]);
                            x_interp = x_interp(:,1:end-ed); % Eliminar los ceros excedentes
                            x8isss = sum(x_interp, 2);


                        %     %%factor diezmado
                        % x8_diezmado = x8(1:2:end);
                        %     %%escalonada

                       % Interpolación lineal
                        xl = interp1(n, x8, xi, 'linear');

             
                        %%interpolacion por escalon
                        x8_escalon = x8 .* (n>=1);


                        % %%%Definir la seņal original desplazada y escalada:
                        % x8_escala = x8;
                        % x8_escala = circshift(x8_escala, -nd);
                        % x8_escala = x8_escala / ed;


                        %%%graficar la seņal final

                        x8_final = x8;
                        x8_final = circshift(x8_final, -nd);
                        x8_final = x8_final / ed;
                        x8_final = x8_final .* (n>=na);
                        subplot(4,1,1)
                        stem(n,x8,'b')
                        title('Función Original Discreta')

                        subplot(4,1,2)
                        stem(xi, x8isss,'r')
                        title('Función Escalar Porcero')
                       
                        subplot(4,1,3)
                        stem(xi, xe, 'o');
                        title('Función Escalar Escalón')
                        
                        subplot(4,1,4)
                        plot(n, x8, 'o', xi, xl, '-');
                        title('Función Escalar Lineal')         %%%check
                        % subplot(7,1,5)
                        % stem(x8_diezmado, '-');
                        % title('diezmado')      %%%check
                        % subplot(7,1,6)
                        % stem(n-dd, x8_escala);
                        % title('Seņal  Desplazada y Escalada')      %%%check
                        % subplot(5,1,7)
                        % stem(n-dd, x8_final );
                        % title('Seņal Final')      %%%check
                        % 
            otherwise
                disp('Número de método inválido');
        
        end
        
       
        
     case 2
        disp('2) [-1,-0.5,0.5,1,1,1,1,0.5])');
        n =[ -4, -3,-2, -1,0,1,2,3] ;
        x8 = [-4,-3,0.5,1, 1,1,1,0.5];
          nd = n-dd;       %Desplazamiento de la señal
        ne = n/ed;       %Escalamiento de la señal
        na = ne-dd;      %Operación final
        ndmin = n - min(n); %Desplazamiento de la señal
        namin = ne - min(ne); %Desplazamiento final
        bub= 1 / ed;
       
        
        
        % Operación final
         bub= abs(bub);
         nmin= min(n);
         nmax= max(n);
               ss=nmax-1;
        xi = nmin: bub :nmax; 
        
        % Crear la seņal diezmada x8d
            n88 = nmin:((nmax+1)/ed)-1;
            x8d = x8(1:ed:end);

        switch x
        case 1
                subplot(3,1,1)
                stem(n,x8,'b')
                title('Función Original Discreta')
                subplot(3,1,2)
                stem(n-dd,x8,'g')
                title('Función Desplazada')
                subplot(3,1,3)
                stem(na,x8,'g')
                title('Señal original desplazada y escalada na = ne-dd')
             
            case 2
                
                           % Interpolación escalonada
                             % Conjunto de puntos para la interpolación
                            xe = zeros(size(xi));  % Valores de la interpolación escalonada
                            for i = 1:length(xi)
                                k2 = round(xi(i));  % Índice entero más cercano
                                k=abs(k2);
                                if k >= nmax  % Si el índice es mayor o igual a 7
                                    xe(i) = x8(end);  % Asignamos el último valor de la función
                                else
                                    xe(i) = x8(k+ss);  % Asignamos el valor correspondiente
                                end
                            end

            
                            
                               % Interpolación por cero

                         %x8i = x8.* kron(1,[1 zeros(1,ed-1)]); % Se agrega un cero después de cada muestra
                         %x8i = [x8i, zeros(1, length(xi)-length(x8i))];
                            % Crear la secuencia de impulsos
                            impulse = kron(1, [1 zeros(1, ed-1)]);

                            % Aplicar la interpolación por cero
                            x_interp = conv(x8, impulse);
                        x8isss = [x_interp, zeros(1, length(xi)-length(x_interp))];


                            %%factor diezmado
                        x8_diezmado = x8(1:2:end);
                            %%escalonada

                       % Interpolación lineal
                        xl = interp1(n, x8, xi, 'linear');

             
                        %%interpolacion por escalon
                        x8_escalon = x8 .* (n>=1);

                        %%%Definir la seņal original desplazada y escalada:
                        x8_escala = x8;
                        x8_escala = circshift(x8_escala, -nd);
                        x8_escala = x8_escala / ed;


                        %%%graficar la seņal final

                        x8_final = x8;
                        x8_final = circshift(x8_final, -nd);
                        x8_final = x8_final / ed;
                        x8_final = x8_final .* (n>=na);
                        subplot(7,1,1)
                        stem(n,x8,'b')
                        title('Función Original Discreta')

                        subplot(7,1,2)
                        stem(xi, x8isss,'r')
                        title('Función Escalar Porcero')
                        subplot(7,1,3)
                        stem(xi, xe, 'o');
                        title('Función Escalar Escalón')
                        
                        subplot(7,1,4)
                        stem(xi, xl, '-');
                        title('Función Escalar Lineal')         %%%check
                        subplot(7,1,5)
                        stem(x8_diezmado, '-');
                        title('diezmado')      %%%check
                        subplot(7,1,6)
                        stem(n-dd, x8_escala);
                        title('Seņal  Desplazada y Escalada')      %%%check
                        subplot(7,1,7)
                        stem(n-dd, x8_final );
                        title('Seņal Final')      %%%check
         
            otherwise
                disp('Número de método inválido');
        
        end


    case 3
        disp('3) (n>=-7 & n<=-3).*2 + (n>=-2 & n<=2).*(2*n+1) +(n>=-3 & n<=7).*(7/n)');
         n = [-5 -4 -3 -2 -1 1 2 3 4 5 6 7];
        x8 = zeros(size(n)); % Inicializa x8 con ceros para asignar valores
        for i = 1:length(n)
              if n(i)>=-7 && n(i)<=-3
                x8(i) = 2;
              elseif n(i)>=-2 && n(i)<=2
                x8(i) = 2*n(i)+1;
              elseif n(i)>=-3 && n(i)<=7
                x8(i) = 7/n(i);
              end
        end
        nd = n-dd;       %Desplazamiento de la señal
        ne = n/ed;       %Escalamiento de la señal
        na = ne-dd;      %Operación final
        ndmin = n - min(n); %Desplazamiento de la señal
        namin = ne - min(ne); %Desplazamiento final
        bub= 1 / ed;
        
        % Operación final
         bub= abs(bub);
         nmin= min(n);
         nmax= abs(max(n));
         ss=nmax-1;
         ss=abs(ss);
         xi = nmin: bub :nmax; 
        
        % Crear la seņal diezmada x8d
            n88 = nmin:((nmax+1)/ed)-1;
            x8d = x8(1:ed:end);

        switch x
        case 1
                subplot(3,1,1)
                stem(n,x8,'b')
                title('Función Original Discreta')
                subplot(3,1,2)
                stem(n-dd,x8,'g')
                title('Función Desplazada')
                subplot(3,1,3)
                stem(na,x8,'g')
                title('Señal original desplazada y escalada na = ne-dd')
             
            case 2
                
                           % Interpolación escalonada
                             % Conjunto de puntos para la interpolación
                            xe = zeros(size(xi));  % Valores de la interpolación escalonada
                            for i = 1:length(xi)
                                k2 = round(xi(i));  % Índice entero más cercano
                                k=abs(k2);
                                if k >= nmax  % Si el índice es mayor o igual a 7
                                    xe(i) = x8(end);  % Asignamos el último valor de la función
                                else
                                    xe(i) = x8(k+ss);  % Asignamos el valor correspondiente
                                end
                                  ndk = floor(xi(i));  % Índice entero más cercano
                                if k < nmin || k+ss > nmax  % Verificamos que el índice esté dentro del rango válido
                                    xe(i) = 0;  % Asignamos un valor nulo si el índice está fuera del rango
                                else
                                    xe(i) = x8(k+ss);  % Asignamos el valor correspondiente si el índice está dentro del rango
                                end
                            end

                            
                        
                               % Interpolación por cero

                         %x8i = x8.* kron(1,[1 zeros(1,ed-1)]); % Se agrega un cero después de cada muestra
                         %x8i = [x8i, zeros(1, length(xi)-length(x8i))];
                            % Crear la secuencia de impulsos
                            impulse = kron(1, [1 zeros(1, ed-1)]);

                            % Aplicar la interpolación por cero
                            x_interp = conv(x8, impulse);
                        x8isss = [x_interp, zeros(1, length(xi)-length(x_interp))];


                            %%factor diezmado
                        x8_diezmado = x8(1:2:end);
                            %%escalonada

                       % Interpolación lineal
                        xl = interp1(n, x8, xi, 'linear');

             
                        %%interpolacion por escalon
                        x8_escalon = x8 .* (n>=1);

                        %%%Definir la seņal original desplazada y escalada:
                        x8_escala = x8;
                        x8_escala = circshift(x8_escala, -nd);
                        x8_escala = x8_escala / ed;


                        %%%graficar la seņal final

                        x8_final = x8;
                        x8_final = circshift(x8_final, -nd);
                        x8_final = x8_final / ed;
                        x8_final = x8_final .* (n>=na);
                        subplot(7,1,1)
                        stem(n,x8,'b')
                        title('Función Original Discreta')

                        subplot(7,1,2)
                        stem(xi, x8isss,'r')
                        title('Función Escalar Porcero')
                        subplot(7,1,3)
                        stem(xi, xe, 'o');
                        title('Función Escalar Escalón')
                        
                        subplot(7,1,4)
                        stem(xi, xl, '-');
                        title('Función Escalar Lineal')         %%%check
                        subplot(7,1,5)
                        stem(x8_diezmado, '-');
                        title('diezmado')      %%%check
                        subplot(7,1,6)
                        stem(n-dd, x8_escala);
                        title('Señal  Desplazada y Escalada')      %%%check
                        subplot(7,1,7)
                        stem(n-dd, x8_final );
                        title('Señal Final')      %%%check
         
            otherwise
                disp('Número de método inválido');
        
        end

  case 4
        disp('4) (-5>=n & n<0).*2.^n + (n>=1 & n<=7).*(5/6).^n');
        n = [-5 -4 -3 -2 -1 1 2 3 4 5 6 7];
        x8 = zeros(size(n)); % Inicializa x8 con ceros para asignar valores
        for i = 1:length(n)
          if n(i)>=-5 && n(i)<=0
            x8(i) = 2^n(i);
          elseif n(i)>=1 && n(i)<=6
            x8(i) = (5/6)^n(i);
          end
        end
        nd = n-dd;       %Desplazamiento de la señal
        ne = n/ed;       %Escalamiento de la señal
        na = ne-dd;      %Operación final
        ndmin = n - min(n); %Desplazamiento de la señal
        namin = ne - min(ne); %Desplazamiento final
        bub= 1 / ed;
        
        % Operación final
         bub= abs(bub);
         nmin= min(n);
         nmax= max(n);
         ss=nmax-1;
         xi = nmin: bub :nmax; 
        
        % Crear la seņal diezmada x8d
            n88 = nmin:((nmax+1)/ed)-1;
            x8d = x8(1:ed:end);

        switch x
        case 1
                subplot(3,1,1)
                stem(n,x8,'b')
                title('Función Original Discreta')
                subplot(3,1,2)
                stem(n-dd,x8,'g')
                title('Función Desplazada')
                subplot(3,1,3)
                stem(na,x8,'g')
                title('Señal original desplazada y escalada na = ne-dd')
             
            case 2
                
                           % Interpolación escalonada
                             % Conjunto de puntos para la interpolación
                            xe = zeros(size(xi));  % Valores de la interpolación escalonada
                            for i = 1:length(xi)
                                k2 = round(xi(i));  % Índice entero más cercano
                                k=abs(k2);
                                if k >= nmax  % Si el índice es mayor o igual a 7
                                    xe(i) = x8(end);  % Asignamos el último valor de la función
                                else
                                    xe(i) = x8(k+ss);  % Asignamos el valor correspondiente
                                end
                            endk = floor(xi(i));  % Índice entero más cercano
                                if k < nmin || k+ss > nmax  % Verificamos que el índice esté dentro del rango válido
                                    xe(i) = 0;  % Asignamos un valor nulo si el índice está fuera del rango
                                else
                                    xe(i) = x8(k+ss);  % Asignamos el valor correspondiente si el índice está dentro del rango
                                end
                            end

                            
                        
                               % Interpolación por cero

                         %x8i = x8.* kron(1,[1 zeros(1,ed-1)]); % Se agrega un cero después de cada muestra
                         %x8i = [x8i, zeros(1, length(xi)-length(x8i))];
                            % Crear la secuencia de impulsos
                            impulse = kron(1, [1 zeros(1, ed-1)]);

                            % Aplicar la interpolación por cero
                            x_interp = conv(x8, impulse);
                        x8isss = [x_interp, zeros(1, length(xi)-length(x_interp))];


                            %%factor diezmado
                        x8_diezmado = x8(1:2:end);
                            %%escalonada

                       % Interpolación lineal
                        xl = interp1(n, x8, xi, 'linear');

             
                        %%interpolacion por escalon
                        x8_escalon = x8 .* (n>=1);

                        %%%Definir la seņal original desplazada y escalada:
                        x8_escala = x8;
                        x8_escala = circshift(x8_escala, -nd);
                        x8_escala = x8_escala / ed;


                        %%%graficar la seņal final

                        x8_final = x8;
                        x8_final = circshift(x8_final, -nd);
                        x8_final = x8_final / ed;
                        x8_final = x8_final .* (n>=na);
                        subplot(7,1,1)
                        stem(n,x8,'b')
                        title('Función Original Discreta')

                        subplot(7,1,2)
                        stem(xi, x8isss,'r')
                        title('Función Escalar Porcero')
                        subplot(7,1,3)
                        stem(xi, xe, 'o');
                        title('Función Escalar Escalón')
                        
                        subplot(7,1,4)
                        stem(xi, xl, '-');
                        title('Función Escalar Lineal')         %%%check
                        subplot(7,1,5)
                        stem(x8_diezmado, '-');
                        title('diezmado')      %%%check
                        subplot(7,1,6)
                        stem(n-dd, x8_escala);
                        title('Seņal  Desplazada y Escalada')      %%%check
                        subplot(7,1,7)
                        stem(n-dd, x8_final );
                        title('Seņal Final')      %%%check
         
            otherwise
                disp('Número de método inválido');
        
        end
end
